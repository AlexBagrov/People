import os
import requests
from datetime import datetime, timedelta
import logging
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_TIGER_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info(f"TELEGRAM_TIGER_BOT_TOKEN exists: {bool(self.bot_token)}")
        logger.info(f"TELEGRAM_CHAT_ID exists: {bool(self.chat_id)}")
        
        if not self.bot_token or not self.chat_id:
            logger.error("TELEGRAM_TIGER_BOT_TOKEN or TELEGRAM_CHAT_ID not found in environment variables")
            logger.error("Please check GitHub Secrets configuration")
            raise ValueError("Missing Telegram credentials")
        
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        logger.info("Telegram bot initialized successfully")
    
    def send_message(self, text, parse_mode='HTML'):
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        try:
            response = requests.post(url, data=data, timeout=30)
            response.raise_for_status()
            logger.info(f"Message sent successfully: {text[:50]}...")
            return True
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to send message: {e}")
            return False

class SupabaseManager:
    def __init__(self):
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_ANON_KEY')
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info(f"SUPABASE_URL exists: {bool(supabase_url)}")
        logger.info(f"SUPABASE_ANON_KEY exists: {bool(supabase_key)}")
        
        if not supabase_url or not supabase_key:
            logger.error("SUPABASE_URL or SUPABASE_ANON_KEY not found in environment variables")
            logger.error("Please check GitHub Secrets configuration")
            raise ValueError("Missing Supabase credentials")
        
        self.supabase: Client = create_client(supabase_url, supabase_key)
        logger.info("Supabase client initialized successfully")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        try:
            logger.info("Attempting to get database schema info...")
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_response = self.supabase.from_('contact').select('count').limit(1).execute()
            logger.info(f"Database connection test successful")
        except Exception as e:
            logger.warning(f"Database schema check failed: {e}")
            logger.info("Continuing with main functionality...")
    
    def get_contact_data(self):
        """–ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã contact –ø–æ –¥–∞—Ç–µ —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (—Å–µ–≥–æ–¥–Ω—è + 20 –¥–Ω–µ–π –¥–ª—è birthday)
            from datetime import datetime, timedelta
            target_date = (datetime.now() + timedelta(days=20)).strftime('%Y-%m-%d')
            
            logger.info(f"Fetching records for event_date: {target_date}, event_type: birthday")
            
            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π –∏ —Ç–∏–ø–æ–º —Å–æ–±—ã—Ç–∏—è
            response = self.supabase.from_('contact').select('name, message, event_date, event_type').eq('event_date', target_date).eq('event_type', 'birthday').execute()
            
            logger.info(f"Raw response: {response}")
            logger.info(f"Response data: {response.data}")
            logger.info(f"Response count: {len(response.data) if response.data else 0}")
            
            if response.data:
                logger.info(f"Found {len(response.data)} records for {target_date}")
                for i, record in enumerate(response.data):
                    logger.info(f"Record {i+1}: {record}")
            
            return response.data
        except Exception as e:
            logger.error(f"Failed to fetch contact data: {e}")
            logger.error(f"Exception type: {type(e)}")
            return []
    
    def format_contact_message(self, contacts, header_text="üìã –°–æ–æ–±—â–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è:", footer_text=""):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
        if not contacts:
            return f"{header_text}\n\nüìã –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è"
        
        logger.info(f"Formatting messages for {len(contacts)} records")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_html = f"<b>{header_text}</b>\n\n"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for i, contact in enumerate(contacts):
            name = contact.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message = contact.get('message', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            event_date = contact.get('event_date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            
            logger.info(f"Formatting message {i+1} for: {name}")
            logger.info(f"Message content: {message}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
            message_html += f"<b>{name}</b>: {message} üéÇ\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if i < len(contacts) - 1:
                message_html += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ
        if footer_text:
            message_html += f"\n\n{footer_text}"
        
        return message_html

def main():
    logger.info("üöÄ Starting Telegram bot job...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db = SupabaseManager()
        bot = TelegramBot()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ GitHub Actions
        test_message = os.getenv('TEST_MESSAGE')
        if test_message:
            logger.info("Sending manual test message")
            if bot.send_message(f"üß™ {test_message}"):
                logger.info("Test message sent successfully")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã contact
        contacts = db.get_contact_data()
        
        logger.info(f"Contacts data received: {contacts}")
        logger.info(f"Contacts type: {type(contacts)}")
        logger.info(f"Contacts length: {len(contacts) if contacts else 0}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        current_time = datetime.now().strftime('%H:%M %d.%m.%Y')
        target_date = (datetime.now() + timedelta(days=20)).strftime('%d.%m.%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        custom_header = os.getenv('CUSTOM_HEADER', f"üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è ({target_date}):")
        custom_footer = os.getenv('CUSTOM_FOOTER', f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {current_time}")
        
        header_text = custom_header
        footer_text = custom_footer
        
        if not contacts:
            logger.info("No birthday records found for target date")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
            bot.send_message(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: {current_time}\nüìã –ù–∞ {target_date} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = db.format_contact_message(contacts, header_text, footer_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if bot.send_message(formatted_message):
            logger.info(f"Birthday messages sent successfully for {len(contacts)} records")
        else:
            logger.error("Failed to send birthday messages")
        
        logger.info(f"‚úÖ Job completed successfully. Sent {len(contacts)} birthday reminders")
        
    except Exception as e:
        error_msg = f"‚ùå Error in Telegram bot: {str(e)}"
        logger.error(error_msg)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            bot = TelegramBot()
            bot.send_message(error_msg)
        except:
            logger.error("Failed to send error notification to Telegram")
        
        raise

if __name__ == "__main__":
    main()
